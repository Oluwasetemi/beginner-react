{"id":"index.html","dependencies":[],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Redux 101</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n\n    <script crossorigin=\"\" src=\"https://unpkg.com/react@17/umd/react.development.js\"></script>\n    <script crossorigin=\"\" src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/@babel/standalone@7.8.3/babel.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/expect/1.20.2/expect.js\"></script>\n    <script type=\"text/babel\">\n      const root = document.getElementById(\"root\");\n\n      const counter = (state = 0, action) => {\n\n        switch (action.type) {\n          case 'INCREMENT':\n            return state + 1;\n            break;\n          case 'DECREMENT':\n            return state - 1;\n            break;\n\n          default:\n            return state;\n        }\n      }\n\n      expect(counter(0, {type: 'INCREMENT'})).toEqual(1)\n      expect(counter(1, {type: 'INCREMENT'})).toEqual(2)\n      expect(counter(1, {type: 'DECREMENT'})).toEqual(1)\n\n      function App(props) {\n        return (\n          <div>\n            <p>React</p>\n          </div>\n        );\n      }\n\n      ReactDOM.render(<App />, root);\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"697808cbb9fe9309237257c6d6444a78","cacheData":{}}